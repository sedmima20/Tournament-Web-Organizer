import React, { useContext, useEffect, useState } from 'react'
import { useParams, Link } from 'react-router-dom'
import { LoggedUserDataContext } from '/contexts/LoggedUserDataContext.jsx'
import { TokenContext } from '/contexts/TokenContext.jsx'
import { AlertContentContext } from '/contexts/AlertContentContext.jsx'
import useTwoApiRequest from '/hooks/useTwoApiRequest.jsx'
import ModalDialog from '/components/ModalDialog.jsx'
import closingX from '/images/closing-x.png'

export default function TournamentsPage() {
    const { token, setToken } = useContext(TokenContext)
    const { loggedUserData, setLoggedUserData } = useContext(LoggedUserDataContext)
    const { alertContent, setAlertContent } = useContext(AlertContentContext)
    const [dialogAlertContent, setDialogAlertContent] = useState(undefined)
    const [tournamentsData, setTournamentsData] = useState(undefined)
    const [hasUserWriteAccess, setHasUserWriteAccess] = useState(undefined)
    const [isOngoingRequest, setIsOngoingRequest] = useState(false)
    const [isCreateTournamentDialogOpen, setIsCreateTournamentDialogOpen] = useState(false)
    const [createTournamentFormData, setCreateTournamentFormData] = useState({tournamentName: ""})
    const { queryUsername } = useParams()
    const getTournamentsRequest = useTwoApiRequest()
    const getPublicTournamentsRequest = useTwoApiRequest({
        endpoint: 'get_latest_public_tournaments'
    })
    const checkUserWriteAccessRequest = useTwoApiRequest()
    const createTournamentRequest = useTwoApiRequest()

    useEffect(() => {
        loadTournaments()
    }, [token, queryUsername])

    // Ovƒõ≈ôen√≠, zda m√° p≈ôihl√°≈°en√Ω u≈æivatel pr√°vo na z√°pis zobrazen√©ho u≈æivatele a jeho turnaj≈Ø
    useEffect(() => {
        if (token && queryUsername) {
            checkUserWriteAccessRequest.fetchData({
                endpoint: 'can_write_user',
                username: queryUsername,
                token: token
            })
                .then((data) => {
                    setHasUserWriteAccess(data.responseData)
                })
        } else {
            setHasUserWriteAccess(undefined)
        }
    }, [token, queryUsername])

    // Funkce pro naƒç√≠t√°n√≠ seznamu turnaj≈Ø. Spou≈°t√≠ se useEffectem hned po naƒçten√≠ str√°nky, p≈ôi zmƒõnƒõ tokenu a p≈ôi p≈ô√≠padn√© zmƒõnƒõ username v query. Spust√≠ se tak√© hned po vytvo≈ôen√≠ nov√©ho turnaje.
    // V p≈ô√≠padƒõ, ≈æe v query chyb√≠ username, jsou naƒçteny nejnovƒõj≈°√≠ ve≈ôejn√© turnaje, nikoli turnaje konkr√©tn√≠ho u≈æivatele.
    function loadTournaments() {
        if (queryUsername) {
            getTournamentsRequest.fetchData({
                endpoint: 'get_user_tournaments',
                username: queryUsername,
                token: token
            })
                .then((data) => {
                    setTournamentsData(data.responseData)
                })
        } else {
            getPublicTournamentsRequest.fetchData()
                .then((data) => {
                    setTournamentsData(data.responseData)
                })
        }
    }

    function handleCreateTournamentClick() {
        setIsCreateTournamentDialogOpen(true)
    }

    function handleCreateTournamentFormDataChange(event) {
        setCreateTournamentFormData(prevCreateTournamentFormData => {
            return {
                ...prevCreateTournamentFormData,
                [event.target.name]: event.target.value
            }
        })
    }

    function handleCreateTournamentFormSubmit() {
        if (createTournamentFormData.tournamentName && !isOngoingRequest) {
            setIsOngoingRequest(true)
            createTournamentRequest.fetchData({
                endpoint: 'create_tournament',
                name: createTournamentFormData.tournamentName,
                username: queryUsername,
                token: token
            })
                .then((data) => {
                    if (data.statusCode === 201) {
                        setAlertContent({ msg: 'Turnaj byl vytvo≈ôen üëç', severity: 'info' })
                        closeCreateTournamentDialog()
                        loadTournaments()
                        // p≈ôesmƒõrovat na n√°stƒõnku? jak to udƒõlat? API zat√≠m nevrac√≠ ID vytvo≈ôen√©ho turnaje
                    } else {
                        setDialogAlertContent({ msg: 'Nƒõco se pokazilo, turnaj se n√°m nepoda≈ôilo vytvo≈ôit.', severity: 'error' })
                    }
                    setIsOngoingRequest(false)
                })
        }
    }

    function closeCreateTournamentDialog() {
        setIsCreateTournamentDialogOpen(false)
        setCreateTournamentFormData({tournamentName: ""})
        setDialogAlertContent(undefined)
    }

    return (
        <>
            {isCreateTournamentDialogOpen &&
                <ModalDialog>
                    <img src={closingX} alt="dialog-closing-x-icon" onClick={closeCreateTournamentDialog}/>
                    {dialogAlertContent && <div className={dialogAlertContent.severity + "-box"}>{dialogAlertContent.msg}</div>}
                    <h2>Vytvo≈ôit nov√Ω turnaj</h2>
                    <input
                        type="text"
                        placeholder="N√°zev turnaje"
                        onChange={handleCreateTournamentFormDataChange}
                        name="tournamentName"
                        value={createTournamentFormData.tournamentName}
                        maxLength="100"
                        disabled={isOngoingRequest}
                    />
                    <button onClick={handleCreateTournamentFormSubmit} disabled={!createTournamentFormData.tournamentName || isOngoingRequest}>Vytvo≈ôit!</button>
                </ModalDialog>
            }
            <section>
                <h1>
                    {queryUsername ?
                        (loggedUserData && loggedUserData.username === queryUsername ?
                            "Moje turnaje" :
                            "Turnaje u≈æivatele ‚Äû" + queryUsername + "‚Äú"
                        ) :
                        "Nejnovƒõj≈°√≠ turnaje"
                    }
                </h1>
                {hasUserWriteAccess && <button onClick={handleCreateTournamentClick}>Vytvo≈ôit turnaj</button>}
                {tournamentsData ?
                    (tournamentsData.length !== 0 ?
                        <table>
                            <tbody>
                            {tournamentsData.map((tournament) => (
                                <tr key={tournament.id}>
                                    <td>
                                        <Link to={'/tournament/' + tournament.id}>{tournament.name}</Link> #{tournament.id}
                                        {tournament.description && <><br/>{tournament.description}</>}
                                    </td>
                                    <td>Organizuje: {tournament.owner_username}</td>
                                    <td>
                                        Viditelnost: {tournament.visibility === 'public' ? "Ve≈ôejn√Ω" : "Soukrom√Ω"}<br/>
                                        {tournament.status === 'preparation' && "P≈ô√≠prava"}
                                        {tournament.status === 'running' && "Prob√≠h√°"}
                                        {tournament.status === 'ended' && "Ukonƒçen"}
                                    </td>
                                    <td>
                                        {tournament.current_round ?
                                            `Kolo ${tournament.current_round}/${tournament.rounds}` :
                                            `Poƒçet kol: ${tournament.rounds}`
                                        }
                                    </td>
                                    <td>
                                        Hr√°ƒçi: {tournament.player_count}<br/>
                                        Z√°pasy: {tournament.match_count}
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table> :
                        (queryUsername ?
                            (loggedUserData && loggedUserData.username === queryUsername ?
                                <p>Zat√≠m ≈æ√°dn√© turnaje. Vytvo≈ô prvn√≠!</p> :
                                <p>U≈æivatel zat√≠m nem√° ≈æ√°dn√© turnaje.</p>
                            ) :
                            <p>Moment√°lnƒõ nejsou napl√°nov√°ny ≈æ√°dn√© ve≈ôejn√© turnaje.</p>
                        )
                    ) :
                    <div className="error-box">Turnaje se nepoda≈ôilo naƒç√≠st</div>
                }
            </section>
        </>
    )
}
